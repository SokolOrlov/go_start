version: '3.1'
services:
  build:
    image: build:develop
    build:
      context: "."
      dockerfile: ".docker/build.Dockerfile"
  
  client:
    build:
      context: "."
      dockerfile: ".docker/client.Dockerfile"
    container_name: client
    # restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - 127.0.0.1:5050:5050
    networks:
      - net1

  trip:
    build:
      context: "."
      dockerfile: ".docker/trip.Dockerfile"
    # restart: unless-stopped
    # depends_on: [ build, kafka, db ]
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - net1

  driver:
    build:
      context: "."
      dockerfile: ".docker/driver.Dockerfile"
    # restart: unless-stopped
    # depends_on: [ build, kafka, db ]
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - 127.0.0.1:6060:6060
    networks:
      - net1


  zookeeper:
    image: confluentinc/cp-zookeeper
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - net1

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    container_name: kafka
    restart: always
    ports:
      - "9093:9093"
    healthcheck:
      test: nc -z kafka 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - net1

  kafka-ui:
    image: 'provectuslabs/kafka-ui:latest'
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=Vasiliy
    networks:
      - net1
  
  db:
    image: postgres
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - net1

networks:
  net1:
    driver: bridge